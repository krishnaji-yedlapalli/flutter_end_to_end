// Mocks generated by Mockito 5.4.4 from annotations
// in sample_latest/test/unit_testing/repository/school_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sample_latest/services/base_service.dart' as _i2;
import 'package:sample_latest/services/utils/service_enums_typedef.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseService extends _i1.Mock implements _i2.BaseService {
  MockBaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> makeRequest<T>({
    required String? url,
    String? baseUrl,
    dynamic body,
    String? contentType,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
    _i4.RequestType? method = _i4.RequestType.get,
    Map<String, dynamic>? extras = const {},
    bool? isOfflineApi = true,
    bool? isFromQueue = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeRequest,
          [],
          {
            #url: url,
            #baseUrl: baseUrl,
            #body: body,
            #contentType: contentType,
            #queryParameters: queryParameters,
            #headers: headers,
            #method: method,
            #extras: extras,
            #isOfflineApi: isOfflineApi,
            #isFromQueue: isFromQueue,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}
